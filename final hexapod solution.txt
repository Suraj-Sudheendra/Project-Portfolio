from scipy.optimize import  fsolve
import numpy as np
import sympy as sp
from sympy  import *
import random
import pandas as pd
from openpyxl import *
import pyinputplus as pyip
import os

class Hexapod:
  def __init__(self,file_name,df=0,sheet_name=1,index=0):
    self.file_name=file_name
    self.sheet=sheet_name
    self.df=df
    self.df_var=0
    self.df_center=0
    self.df_angle=0
    self.ir=index

  def input(self):
    print('Are you importing data from excel or csv')
    ans=pyip.inputStr(allowRegexes=[r'excel','e','E','csv','C','c'], limit=3,timeout=10)
    if ans=='excel' or ans=='e' or ans=='E':
      #self.file_name+='.xlsx'
      workbook=pd.read_excel(self.file_name+'.xlsx', sheet_name= 0)
    else: 
      #self.file_name+='.csv'
      workbook=pd.read_csv(self.file_name+'.csv')
    self.ir=workbook.shape[0]+1
    return workbook

  def output(self):
    df=pd.concat([self.df_center,self.df_angle],axis=1).drop(30)
    #df=df.drop(30)
    print("Do you want to export data to 'excel' or 'csv': ")
    ans=pyip.inputStr(allowRegexes=[r'excel','e','E','csv','C','c'], limit=3,timeout=10)
    if ans=='excel' or ans=='e' or ans=='E':
      df.to_excel('output.xlsx', sheet_name="test")
    else: 
      df.to_csv('output.csv',index=True)


  def eighteen_eqs(self):
    global l1,l2,l3,l4,l5,l6

    def func(p):
      x1, y1 ,z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, x5, y5, z5, x6, y6, z6= p
      return ((x1+27)**2+(y1+5.19615)**2+(z1+80)**2-l1**2, (x2-9)**2+(y2+25.9808)**2+(z2+80)**2-l2**2,(x3-18)**2+(y3+20.7846)**2+(z3+80)**2-l3**2,(x4-18)**2+(y4-20.7846)**2+(z4+80)**2-l4**2,(x5-9)**2+(y5-25.9808)**2+(z5+80)**2-l5**2,(x6+27)**2+(y6-5.19615)**2+(z6+80)**2-l6**2,(x1-x2)**2+(y1-y2)**2+(z1-z2)**2-10.3923**2,(x3-x4)**2+(y3-y4)**2+(z3-z4)**2-10.3923**2,(x5-x6)**2+(y5-y6)**2+(z5-z6)**2-10.3923**2, (x2-x3)**2+(y2-y3)**2+(z2-z3)**2-41.5692**2,(x4-x5)**2+(y4-y5)**2+(z4-z5)**2-41.5692**2,(x6-x1)**2+(y6-y1)**2+(z6-z1)**2-41.5692**2,(x2-x4)**2+(y2-y4)**2+(z2-z4)**2-47.6235**2,(x4-x6)**2+(y4-y6)**2+(z4-z6)**2-47.6235**2,(x6-x2)**2+(y6-y2)**2+(z6-z2)**2-47.6235**2,(x1-x3)**2+(y1-y3)**2+(z1-z3)**2-47.6235**2, (x3-x5)**2+(y3-y5)**2+(z3-z5)**2-47.6235**2, (x5-x1)**2+(y5-y1)**2+(z5-z1)**2-47.6235**2 )

    
    guess= [-15.42369457,-15.86919374,-1.946174315,-6.370471841,-20.95652562,-2.343933653,29.38552012, 0.24225289, -2.691537409, 29.27129538, 10.6292794, -2.38067901, -6.941595539,30.97860694,  -0.789641658, -15.88059353, 25.67891262, -0.70274071]
    for i in range (len(guess)):
      guess[i]=round(guess[i],2)
    workbook=self.input()
    df=pd.DataFrame(index=range(self.ir), columns=range(18))
    df_center=pd.DataFrame(index=range(self.ir), columns=range(3))
    df.columns=['x1','y1', 'z1', 'x2', 'y2', 'z2', 'x3', 'y3', 'z3','x4','y4','z4','x5','y5','z5','x6','y6','z6']
    df_center.columns=['x','y','z']
    for i in range (len(workbook)):
      l1,l2,l3,l4,l5,l6 = workbook['L1'].iloc[i],workbook['L2'].iloc[i],workbook['L3'].iloc[i],workbook['L4'].iloc[i],workbook['L5'].iloc[i],workbook['L6'].iloc[i]
      df.iloc[i]=fsolve(func,(guess))
      centre_x=round((df['x1'].iloc[i]+df['x3'].iloc[i]+df['x5'].iloc[i])/3,4)
      centre_y=round((df['y1'].iloc[i]+df['y3'].iloc[i]+df['y5'].iloc[i])/3,4)
      centre_z=round((df['z1'].iloc[i]+df['z3'].iloc[i]+df['z5'].iloc[i])/3,4)
      df_center.iloc[i]=[centre_x,centre_y,centre_z]
    index=[]
    for i in range (0,self.ir):
      index.append(i)
    df.index,df_center.index=index,index
    self.df_var,self.df_center=df,df_center

  def three_angles(self):
    workbook=self.df_var
    df=pd.DataFrame(index=range(self.ir), columns=range(3))

    def func(p):
      x,y,z,a,b,c,d,e,f=p
      return [(-18)*sp.sqrt(1-y**2)*sp.sqrt(1-z**2)-(sp.sqrt(1-x**2)*z-x*y*sp.sqrt(1-z**2))*(-20.7846)-x1,(-18)*sp.sqrt(1-y**2)*z+(sp.sqrt(1-x**2)*sp.sqrt(1-z**2)+x*y*z)*(-20.7846)-y1,(-18)*(-y)+x*sp.sqrt(1-y**2)*(-20.7846)-z1,(27)*sp.sqrt(1-y**2)*sp.sqrt(1-z**2)-(sp.sqrt(1-x**2)*z-x*y*sp.sqrt(1-z**2))*(-5.19615)-x2,(27)*sp.sqrt(1-y**2)*z+(sp.sqrt(1-x**2)*sp.sqrt(1-z**2)+x*y*z)*(-5.19615)-y2,(27)*(-y)+x*sp.sqrt(1-y**2)*(-5.19615)-z2,(-9)*sp.sqrt(1-y**2)*sp.sqrt(1-z**2)-(sp.sqrt(1-x**2)*z-x*y*sp.sqrt(1-z**2))*(25.9808)-x3,(-9)*sp.sqrt(1-y**2)*z+(sp.sqrt(1-x**2)*sp.sqrt(1-z**2)+x*y*z)*(25.9808)-y3,(-9)*(-y)+x*sp.sqrt(1-y**2)*(25.9808)-z3]

    init_pt=[0.08715576, 0.08715576,0.08715576,0, 0 ,0 ,0 ,0 ,0]
    for i in range (self.ir):
      x1,x2,x3,y1,y2,y3,z1,z2,z3 = workbook['x1'].iloc[i], workbook['x3'].iloc[i],workbook['x5'].iloc[i],workbook['y1'].iloc[i],workbook['y3'].iloc[i],workbook['y5'].iloc[i], workbook['z1'].iloc[i],workbook['z3'].iloc[i],workbook['z5'].iloc[i]
      x1,x2,x3,y1,y2,y3,z1,z2,z3= round(x1,4), round(x2,4), round(x3,4),round(y1,4), round(y2,4), round(y3,4),round(z1,4), round(z2,4), round(z3,4)
      rad=(fsolve(func,(init_pt)))
      deg=[]
      for j in range(3):
        deg.append(np.degrees(rad[j]))
        deg[j]=round(deg[j],4)
      df.iloc[i]=deg
    index=[]
    for i in range (0,self.ir):
      index.append(i)
    df.index=index
    df.columns=['x φ (deg) ','y θ (deg)','z ψ (deg)']
    self.df_angle=df
  


def main():
  print("Please copy and paste file name. ")
  ans=pyip.inputStr(blockRegexes=[r'.xlsx,.csv,xlsx,csv'], limit=3,timeout=10)
  hexapod=Hexapod(ans)
  hexapod.eighteen_eqs()
  hexapod.three_angles()
  hexapod.output()

main()

